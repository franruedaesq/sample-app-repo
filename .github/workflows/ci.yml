name: Sample App CI

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Record Start Time
        id: start_time
        run: echo "start_unix=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      - name: Run security scan
        run: |
          mkdir -p reports
          # Asegúrate de que tu script genere reports/security-report.json
          npm run scan

      - name: Run tests
        continue-on-error: true
        run: |
          mkdir -p reports
          # Asegúrate de que tu runner de tests genere reports/junit.xml
          npm test

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Calculate Metrics
        id: calculate_metrics
        env:
          JUNIT_FILE: reports/junit.xml
          SEC_FILE: reports/security-report.json
        run: |
          # Duración del build
          end_unix=$(date +%s)
          start_unix="${{ steps.start_time.outputs.start_unix }}"
          duration=$((end_unix - start_unix))
          echo "ci_build_duration_seconds=$duration" >> $GITHUB_ENV

          # Fallos de test (si no hay archivo, 0)
          if [ -f "$JUNIT_FILE" ]; then
            failed_tests=$(grep -o 'failures="[0-9]*"' "$JUNIT_FILE" | grep -o '[0-9]*' | head -n 1 || echo 0)
          else
            failed_tests=0
          fi
          echo "ci_tests_failed_total=$failed_tests" >> $GITHUB_ENV

          # Vulnerabilidades críticas del scan (si no hay archivo/campo, 0)
          if [ -f "$SEC_FILE" ]; then
            critical_vulns=$(jq -r 'try .summary.critical // 0 catch 0' "$SEC_FILE")
          else
            critical_vulns=0
          fi
          echo "image_vulns_critical_total=$critical_vulns" >> $GITHUB_ENV

          echo "Metrics calculated: Duration=${duration}s, Failed Tests=${failed_tests}, Critical Vulns=${critical_vulns}"

      - name: Archive reports
        uses: actions/upload-artifact@v4
        with:
          name: build-reports
          path: |
            reports/junit.xml
            reports/security-report.json
          if-no-files-found: ignore

      - name: Push Metrics to Pushgateway
        if: ${{ !!secrets.PUSHGATEWAY_URL }}
        env:
          PUSHGATEWAY_URL: ${{ secrets.PUSHGATEWAY_URL }}
        run: |
          job_name="ci_build"
          # Evitar "/" en el instance para que no rompa el path
          instance_name="${{ github.repository }}-${{ github.run_id }}"
          instance_name="${instance_name//\//_}"

          cat <<EOF | curl -sS --fail --retry 2 -m 10 --data-binary @- \
            "${PUSHGATEWAY_URL}/metrics/job/${job_name}/instance/${instance_name}"
          # TYPE ci_build_duration_seconds gauge
          ci_build_duration_seconds ${{ env.ci_build_duration_seconds }}
          # TYPE ci_tests_failed_total gauge
          ci_tests_failed_total ${{ env.ci_tests_failed_total }}
          # TYPE image_vulns_critical_total gauge
          image_vulns_critical_total ${{ env.image_vulns_critical_total }}
          EOF
